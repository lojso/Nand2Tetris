// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    Not16(
        in[0] = zx,
        in[1] = zx,
        in[2] = zx,
        in[3] = zx,
        in[4] = zx,
        in[5] = zx,
        in[6] = zx,
        in[7] = zx,
        in[8] = zx,
        in[9] = zx,
        in[10] = zx,
        in[11] = zx,
        in[12] = zx,
        in[13] = zx,
        in[14] = zx,
        in[15] = zx,
        out = notZx);

    Not16(
        in[0] = zy,
        in[1] = zy,
        in[2] = zy,
        in[3] = zy,
        in[4] = zy,
        in[5] = zy,
        in[6] = zy,
        in[7] = zy,
        in[8] = zy,
        in[9] = zy,
        in[10] = zy,
        in[11] = zy,
        in[12] = zy,
        in[13] = zy,
        in[14] = zy,
        in[15] = zy,
        out = notZy);

    And16(a = notZx, b = x, out = xZeroPreset);
    And16(a = notZy, b = y, out = yZeroPreset);    

    Xor16(
        a = xZeroPreset,
        b[0] = nx,
        b[1] = nx,
        b[2] = nx,
        b[3] = nx,
        b[4] = nx,
        b[5] = nx,
        b[6] = nx,
        b[7] = nx,
        b[8] = nx,
        b[9] = nx,
        b[10] = nx,
        b[11] = nx,
        b[12] = nx,
        b[13] = nx,
        b[14] = nx,
        b[15] = nx,
        out = xNegatePreset);

    Xor16(
        a = yZeroPreset,
        b[0] = ny,
        b[1] = ny,
        b[2] = ny,
        b[3] = ny,
        b[4] = ny,
        b[5] = ny,
        b[6] = ny,
        b[7] = ny,
        b[8] = ny,
        b[9] = ny,
        b[10] = ny,
        b[11] = ny,
        b[12] = ny,
        b[13] = ny,
        b[14] = ny,
        b[15] = ny,
        out = yNegatePreset);

    Add16(a = xNegatePreset, b = yNegatePreset, out = sumResult);
    And16(a = xNegatePreset, b = yNegatePreset, out = andResult);

    
    Not16(
        in[0] = f,
        in[1] = f,
        in[2] = f,
        in[3] = f,
        in[4] = f,
        in[5] = f,
        in[6] = f,
        in[7] = f,
        in[8] = f,
        in[9] = f,
        in[10] = f,
        in[11] = f,
        in[12] = f,
        in[13] = f,
        in[14] = f,
        in[15] = f,
        out = notF);

    And16(
        a[0] = f,
        a[1] = f,
        a[2] = f,
        a[3] = f,
        a[4] = f,
        a[5] = f,
        a[6] = f,
        a[7] = f,
        a[8] = f,
        a[9] = f,
        a[10] = f,
        a[11] = f,
        a[12] = f,
        a[13] = f,
        a[14] = f,
        a[15] = f,
        b = sumResult,
        out = sumZeroPostprocess);

    And16(a = notF, b = andResult, out = andZeroPostProcess);

    Or16(a = sumZeroPostprocess, b = andZeroPostProcess, out = funcResult);

    Xor16(a = funcResult,
            b[0] = no,
            b[1] = no,
            b[2] = no,
            b[3] = no,
            b[4] = no,
            b[5] = no,
            b[6] = no,
            b[7] = no,
            b[8] = no,
            b[9] = no,
            b[10] = no,
            b[11] = no,
            b[12] = no,
            b[13] = no,
            b[14] = no,
            b[15] = no,
            out = out,
            out[15] = ng,
            out[0..7] = firstHalfTotalResult,
            out[8..15] = secondHalfTotalResult);

    Or8Way(in = firstHalfTotalResult, out = or8WayFirstHalfResult);
    Or8Way(in = secondHalfTotalResult, out = or8WaySecondHalfResult);

    Or(a = or8WayFirstHalfResult, b = or8WaySecondHalfResult, out = resultNotZero);
    Not(in = resultNotZero, out = zr);
    
}

