// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //12345
    //-5104
    //23456
    //-7696
    Not(in = instruction[15], out = isACommand);
    Or(a = isACommand, b = instruction[5], out = aLoad);
    And(a = instruction[15], b = instruction[4], out = dLoad);
    And(a = instruction[15], b = instruction[3], out = writeM);

    //A Register Mux
    Mux16(
    a = aluToA,
    b = instruction,
    sel = isACommand,
    out = aMux);

    //A Register
    ARegister(
        in = aMux,
        load = aLoad,
        out = aRegister,
        out[0..14] = addressM //12345
        );

    //ALU Mux
    Mux16(
        a = aRegister,
        b = inM,
        sel = instruction[12],
        out = aluMux);  // 12345
    
    //D Register

    DRegister(
        in = aluToD,
        load = dLoad,
        out = dRegister); // 0
    

    // Stubs
    Not16(in = instruction,
     out = outStub);

    ALU(
        x = dRegister, // 0
        y = aluMux,    // 12345
        zx = instruction[11],
        nx = instruction[10],
        zy = instruction[9],
        ny = instruction[8],
        f  = instruction[7],
        no = instruction[6],
        out = outM, // 12345
        out = aluToD,
        out = aluToA,
        zr = aluZero, // 0
        ng = aluNegative // 0
    );

    Not(in = aluZero, out = notZr);
    Not(in = aluNegative, out = notNr);

    // DEBUG
    And(a = true, b = instruction[0], out = j3);
    And(a = true, b = instruction[1], out = j2);
    And(a = true, b = instruction[2], out = j1);

    And(a = instruction[2], b = instruction[1], out = j1j2);
    And(a = j1j2, b = aluNegative, out = j1j2Nr);

    And(a = instruction[2], b = notZr, out = j1NZr);
    And(a = j1NZr, b = aluNegative, out = j1NZrNr);

    And(a = instruction[1], b = aluZero, out = j2Zr);
    And(a = j2Zr, b = notNr, out = j2ZrNNr);

    And(a = instruction[0], b = notZr, out = j3NZr);
    And(a = j3NZr, b = notNr, out = j3NZrNNr);

    Or(a = j1j2Nr, b = j1NZrNr, out = firstHalf);
    Or(a = j2ZrNNr, b = j3NZrNNr, out = secondHalf);

    Or(a = firstHalf, b = secondHalf, out = jump);
    And(a = jump, b = instruction[15], out = pcLoad);

    PC(
        in = aRegister,
        load = pcLoad,
        inc = true, 
        reset = reset,
        out[0..14] = pc
    );
}

//          a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
// 1  1  1  0  0  0  1  1  0  0  0  0  1  0  0  0
// 15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0

// (!a && !b && c && !x && !y) || 
// (!a && b && !c && x && !y) ||
// (!a && b && c && !y) || 
// (a && !b && !c && !x && y) ||
// (a && !b && c && !x) ||
// (a && b && !c && (x || y)) ||
// (a && b && c)

