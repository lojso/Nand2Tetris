// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powersOfTwo;

    /** Initializes the library. */
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }

        return x;        
    }

    /** Returns the product of x and y. 
    *  When a Jack compiler detects the multiplication operator '*' in the 
    *  program's code, it handles it by invoking this method. In other words,
    *  the Jack expressions x*y and multiply(x,y) return the same value.
    */
    function int multiply(int x, int y) {
        var int sum, shiftedX, bitIndex;
        let sum = 0;
        let shiftedX = x;
        let bitIndex = 0;
        while(bitIndex < 16){
            if(Math.bit(y, bitIndex)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let bitIndex = bitIndex + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
    *  When a Jack compiler detects the multiplication operator '/' in the 
    *  program's code, it handles it by invoking this method. In other words,
    *  the Jack expressions x/y and divide(x,y) return the same value.
    */
    function int divide(int x, int y) {
        var int q, doubleQ, result;
        var boolean isResultPositive;

        let isResultPositive = ((x > 0) = (y > 0));
        
        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y > x) {
            return 0;
        }

        let q = Math.divide(x, y + y);

        let doubleQ = q + q;
        if(x - (doubleQ * y) < y) {
            let result = doubleQ;
        } else {
            let result = doubleQ + 1;
        }

        if(isResultPositive) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;
        var int temp1, temp2;

        let y = 0;
        let j = 7; // 16/2 - 1
        while(j > -1) {
            let temp1 = y + powersOfTwo[j];
            let temp2 = temp1 * temp1;
            if(~(temp2 > x) & (temp2 > 0)){
                let y = temp1;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(b > a) {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(b < a) {
            return b;
        }
        return a;
    }

    /** Returns true if the bit in given position in given number is 1 */
    function boolean bit(int number, int bitPosition) {
        return ~((number & powersOfTwo[bitPosition]) = 0);
    }
}
