// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;

    static int heapBase;
    static int SIZE;
    static int NEXT;

    /** Initializes the class. */
    function void init() {
        let NEXT = 0;
        let SIZE = 1;        

        let ram = 0;
        let heapBase = 2048;
        let heap = heapBase;
        let freeList = heap;
        let freeList[NEXT] = 0;
        let freeList[SIZE] = 14335;
        
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array freeBlock, allocatedBlock;

        let freeBlock = Memory.firstFree(size + 2);
        if(freeBlock = 0) {
            return -1;
        }

        let allocatedBlock = freeBlock + freeBlock[SIZE] - size - 2;
        let allocatedBlock[NEXT] = 0;
        let allocatedBlock[SIZE] = size + 2;
        let freeBlock[SIZE] = freeBlock[SIZE] - size - 2;

        return allocatedBlock + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array tail;
        let debug[0] = o;
        let tail = Memory.heapTail();
        let debug[1] = tail;
        let tail[NEXT] = o - 2;

        return;
    }

    function Array firstFree(int size) {
        var Array currentBlock;
        let currentBlock = freeList;
        while(~(currentBlock = 0)) {
            if(currentBlock[SIZE] > (size - 1)) {
                return currentBlock;
            }
            let currentBlock = currentBlock[NEXT];
        }
        return 0;
    }    

    function Array heapTail() {
        var Array currentBlock;
        let currentBlock = freeList;
        while(~(currentBlock[NEXT] = 0)) {
            let currentBlock = currentBlock[NEXT];
        }
        return currentBlock;
    }
}
