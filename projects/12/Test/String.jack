// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int capacity;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0) {
            let maxLength = 1;
        }
        let buffer = Array.new(maxLength);
        let capacity = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do buffer.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < length) {
            let buffer[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < capacity) {
            let buffer[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int index, value;
        var boolean isNegative;
        let index = 0;
        let value = 0;
        let isNegative = false;

        if(buffer[0] = 45) {
            let index = index + 1;
            let isNegative = true;
        }

        while (index < length) {
            let value = value * 10;  
            let value = value + String.charToDigit(buffer[index]);
            //do Output.printChar(buffer[index]);
            do Output.printInt(value);
            do Output.println();

                      
            let index = index + 1;
        }
        do Output.printInt(value);
        do Output.println();

        if (isNegative) {
            let value = -value;
            do Output.printString("Negative: ");
            do Output.printInt(value);
            do Output.println();
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }

        do setIntImpl(val);
        return;
    }

    method void setIntImpl(int val) {
        var int lastDigit;
        var char digitChar;
        let lastDigit = val - (10 * (val / 10));
        
        let digitChar = String.digitToChar(lastDigit);
        
        if (val > 9) {
            let val = val / 10;
            do setIntImpl(val);
        }

        do appendChar(digitChar);
        return;
    }

    function char digitToChar(int digit) {
        return digit + 48;
    }

    
    function int charToDigit(char ch) {
        return ch - 48;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
